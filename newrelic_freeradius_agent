#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'newrelic_plugin'

module FreeradiusAgent

  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid 'com.secondimpression.newrelic-freeradius-agent'
    agent_version '0.0.1'
    agent_config_options :name, :host, :port, :secret
    agent_human_labels('FreeRADIUS') { name }

    def setup_metrics
      @access_requests   = NewRelic::Processor::EpochCounter.new
      @access_accepts    = NewRelic::Processor::EpochCounter.new
      @access_rejects    = NewRelic::Processor::EpochCounter.new
      @access_challenges = NewRelic::Processor::EpochCounter.new

      @auth_responses          = NewRelic::Processor::EpochCounter.new
      @auth_duplicate_requests = NewRelic::Processor::EpochCounter.new
      @auth_malformed_requests = NewRelic::Processor::EpochCounter.new
      @auth_invalid_requests   = NewRelic::Processor::EpochCounter.new
      @auth_dropped_requests   = NewRelic::Processor::EpochCounter.new
      @auth_unknown_types      = NewRelic::Processor::EpochCounter.new

      @accounting_requests           = NewRelic::Processor::EpochCounter.new
      @accounting_responses          = NewRelic::Processor::EpochCounter.new
      @accounting_duplicate_requests = NewRelic::Processor::EpochCounter.new
      @accounting_malformed_requests = NewRelic::Processor::EpochCounter.new
      @accounting_invalid_requests   = NewRelic::Processor::EpochCounter.new
      @accounting_dropped_requests   = NewRelic::Processor::EpochCounter.new
      @accounting_unknown_types      = NewRelic::Processor::EpochCounter.new

      @proxy_access_requests   = NewRelic::Processor::EpochCounter.new
      @proxy_access_accepts    = NewRelic::Processor::EpochCounter.new
      @proxy_access_rejects    = NewRelic::Processor::EpochCounter.new
      @proxy_access_challenges = NewRelic::Processor::EpochCounter.new

      @proxy_auth_responses          = NewRelic::Processor::EpochCounter.new
      @proxy_auth_duplicate_requests = NewRelic::Processor::EpochCounter.new
      @proxy_auth_malformed_requests = NewRelic::Processor::EpochCounter.new
      @proxy_auth_invalid_requests   = NewRelic::Processor::EpochCounter.new
      @proxy_auth_dropped_requests   = NewRelic::Processor::EpochCounter.new
      @proxy_auth_unknown_types      = NewRelic::Processor::EpochCounter.new

      @proxy_accounting_requests           = NewRelic::Processor::EpochCounter.new
      @proxy_accounting_responses          = NewRelic::Processor::EpochCounter.new
      @proxy_accounting_duplicate_requests = NewRelic::Processor::EpochCounter.new
      @proxy_accounting_malformed_requests = NewRelic::Processor::EpochCounter.new
      @proxy_accounting_invalid_requests   = NewRelic::Processor::EpochCounter.new
      @proxy_accounting_dropped_requests   = NewRelic::Processor::EpochCounter.new
      @proxy_accounting_unknown_types      = NewRelic::Processor::EpochCounter.new
    end

    def poll_cycle
      unless get_freeradius_status
        return nil
      end

      stats = get_freeradius_status

      report_metric "Access/Requests",    "Requests/Second",    @access_requests.process( stats['Access-Requests'] )     if stats['Access-Requests']
      report_metric "Access/Accepts",     "Accepts/Second",     @access_accepts.process( stats['Access-Accepts'] )       if stats['Access-Accepts']
      report_metric "Access/Rejects",     "Rejects/Second",     @access_rejects.process( stats['Access-Rejects'] )       if stats['Access-Rejects']
      report_metric "Access/Challenges",  "Challenges/Second",  @access_challenges.process( stats['Access-Challenges'] ) if stats['Access-Challenges']

      report_metric "Auth/Responses", "Responses/Second", @auth_responses.process( stats['Auth-Responses'] )                   if stats['Auth-Responses']
      report_metric "Auth/Duplicate", "Requests/Second",  @auth_duplicate_requests.process( stats['Auth-Duplicate-Requests'] ) if stats['Auth-Duplicate-Requests']
      report_metric "Auth/Malformed", "Requests/Second",  @auth_malformed_requests.process( stats['Auth-Malformed-Requests'] ) if stats['Auth-Malformed-Requests']
      report_metric "Auth/Invalid",   "Requests/Second",  @auth_invalid_requests.process( stats['Auth-Invalid-Requests'] )     if stats['Auth-Invalid-Requests']
      report_metric "Auth/Dropped",   "Requests/Second",  @auth_dropped_requests.process( stats['Auth-Dropped-Requests'] )     if stats['Auth-Dropped-Requests']
      report_metric "Auth/Unknown",   "Requests/Second",  @auth_unknown_types.process( stats['Auth-Unknown-Types'] )           if stats['Auth-Unknown-Types']

      report_metric "Accounting/Requests",  "Requests/Second",  @accounting_requests.process( stats['Accounting-Requests'] )               if stats['Accounting-Requests']
      report_metric "Accounting/Responses", "Responses/Second", @accounting_responses.process( stats['Accounting-Responses'] )             if stats['Accounting-Responses']
      report_metric "Accounting/Duplicate", "Requests/Second",  @accounting_duplicate_requests.process( stats['Acct-Duplicate-Requests'] ) if stats['Acct-Duplicate-Requests']
      report_metric "Accounting/Malformed", "Requests/Second",  @accounting_malformed_requests.process( stats['Acct-Malformed-Requests'] ) if stats['Acct-Malformed-Requests']
      report_metric "Accounting/Invalid",   "Requests/Second",  @accounting_invalid_requests.process( stats['Acct-Invalid-Requests'] )     if stats['Acct-Invalid-Requests']
      report_metric "Accounting/Dropped",   "Requests/Second",  @accounting_dropped_requests.process( stats['Acct-Dropped-Requests'] )     if stats['Acct-Dropped-Requests']
      report_metric "Accounting/Unknown",   "Requests/Second",  @accounting_unknown_types.process( stats['Acct-Unknown-Types'] )           if stats['Acct-Unknown-Types']

      report_metric "Proxy/Access/Requests",   "Requests/Second",   @proxy_access_requests.process( stats['Proxy-Access-Requests'] )     if stats['Proxy-Access-Requests']
      report_metric "Proxy/Access/Accepts",    "Accepts/Second",    @proxy_access_accepts.process( stats['Proxy-Access-Accepts'] )       if stats['Proxy-Access-Accepts']
      report_metric "Proxy/Access/Rejects",    "Rejects/Second",    @proxy_access_rejects.process( stats['Proxy-Access-Rejects'] )       if stats['Proxy-Access-Rejects']
      report_metric "Proxy/Access/Challenges", "Challenges/Second", @proxy_access_challenges.process( stats['Proxy-Access-Challenges'] ) if stats['Proxy-Access-Challenges']

      report_metric "Proxy/Auth/Responses", "Responses/Second", @proxy_auth_responses.process( stats['Proxy-Auth-Responses'] )                   if stats['Proxy-Auth-Responses']
      report_metric "Proxy/Auth/Duplicate", "Requests/Second",  @proxy_auth_duplicate_requests.process( stats['Proxy-Auth-Duplicate-Requests'] ) if stats['Proxy-Auth-Duplicate-Requests']
      report_metric "Proxy/Auth/Malformed", "Requests/Second",  @proxy_auth_malformed_requests.process( stats['Proxy-Auth-Malformed-Requests'] ) if stats['Proxy-Auth-Malformed-Requests']
      report_metric "Proxy/Auth/Invalid",   "Requests/Second",  @proxy_auth_invalid_requests.process( stats['Proxy-Auth-Invalid-Requests'] )     if stats['Proxy-Auth-Invalid-Requests']
      report_metric "Proxy/Auth/Dropped",   "Requests/Second",  @proxy_auth_dropped_requests.process( stats['Proxy-Auth-Dropped-Requests'] )     if stats['Proxy-Auth-Dropped-Requests']
      report_metric "Proxy/Auth/Unknown",   "Requests/Second",  @proxy_auth_unknown_types.process( stats['Proxy-Auth-Unknown-Types'] )           if stats['Proxy-Auth-Unknown-Types']

      report_metric "Proxy/Accounting/Requests",  "Requests/Second",  @proxy_accounting_requests.process( stats['Proxy-Accounting-Requests'] )               if stats['Proxy-Accounting-Requests']
      report_metric "Proxy/Accounting/Responses", "Responses/Second", @proxy_accounting_responses.process( stats['Proxy-Accounting-Responses'] )             if stats['Proxy-Accounting-Responses']
      report_metric "Proxy/Accounting/Duplicate", "Requests/Second",  @proxy_accounting_duplicate_requests.process( stats['Proxy-Acct-Duplicate-Requests'] ) if stats['Proxy-Acct-Duplicate-Requests']
      report_metric "Proxy/Accounting/Malformed", "Requests/Second",  @proxy_accounting_malformed_requests.process( stats['Proxy-Acct-Malformed-Requests'] ) if stats['Proxy-Acct-Malformed-Requests']
      report_metric "Proxy/Accounting/Invalid",   "Requests/Second",  @proxy_accounting_invalid_requests.process( stats['Proxy-Acct-Invalid-Requests'] )     if stats['Proxy-Acct-Invalid-Requests']
      report_metric "Proxy/Accounting/Dropped",   "Requests/Second",  @proxy_accounting_dropped_requests.process( stats['Proxy-Acct-Dropped-Requests'] )     if stats['Proxy-Acct-Dropped-Requests']
      report_metric "Proxy/Accounting/Unknown",   "Requests/Second",  @proxy_accounting_unknown_types.process( stats['Proxy-Acct-Unknown-Types'] )           if stats['Proxy-Acct-Unknown-Types']
    end

    def get_freeradius_status
      radclient = `which radclient`.strip
      if radclient == ""
        print "ERROR: Cannot find Radclient.\n"
        return nil
      end

      command = "echo \"Message-Authenticator=0x00, FreeRADIUS-Statistics-Type=0x1f, Response-Packet-Type = Access-Accept\" | #{radclient} #{host}:#{port} status #{secret} 2>&1\n"
      output = `#{command}`

      if !$?.success? or output =~ /no response/i
        print "ERROR: Cannot connect to FreeRADIUS.\n"
      end

      metrics = Hash.new
      output.split(/\n/).select{ |x| x =~ /FreeRADIUS-Total/i }.map{ |x| x.strip }.each do |out|
        metrics[out.split(" = ")[0].gsub("FreeRADIUS-Total-", "")] = out.split(" = ")[1].to_i
      end

      return metrics
    end

  end

  NewRelic::Plugin::Config.config_file = File.dirname(__FILE__) + '/config/newrelic_plugin.yml'
  NewRelic::Plugin::Setup.install_agent :freeradius_agent, self

  NewRelic::Plugin::Run.setup_and_run
end

